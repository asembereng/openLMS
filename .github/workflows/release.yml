name: Release Management

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openlms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up environment
      run: |
        cp .env.example .env || echo "No .env.example found"
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> .env
        echo "DEBUG=True" >> .env
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/openlms_test" >> .env
        
    - name: Run migrations
      run: |
        python manage.py makemigrations
        python manage.py migrate
        
    - name: Run tests
      run: |
        python manage.py test
        
    - name: Check code quality
      run: |
        python manage.py check
        python manage.py check --deploy --settings=laundry_management.settings_production

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Build static files
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "SECRET_KEY=build-secret-key" > .env
        echo "DEBUG=False" >> .env
        python manage.py collectstatic --noinput --settings=laundry_management.settings_production
        
    - name: Create deployment package
      run: |
        mkdir -p release
        tar -czf release/openlms-${{ github.ref_name }}.tar.gz \
          --exclude='venv' \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='logs' \
          --exclude='media' \
          --exclude='db.sqlite3' \
          .
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: openlms-release
        path: release/

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/openlms
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: openlms-release
        path: release/
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > CHANGELOG_RELEASE.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG_RELEASE.md
        else
          echo "## Initial Release" > CHANGELOG_RELEASE.md
          echo "First production release of A&F Laundry Management System" >> CHANGELOG_RELEASE.md
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/*
          CHANGELOG.md
          DEPLOYMENT_GUIDE.md
          README.md
        body_path: CHANGELOG_RELEASE.md
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v') && github.repository == 'asembereng/openLMS'
    environment: production
    
    steps:
    - name: Deploy notification
      run: |
        echo "ðŸš€ Production deployment would start here"
        echo "Version: ${{ github.ref_name }}"
        echo "Docker Image: ${{ secrets.DOCKER_USERNAME }}/openlms:${{ github.ref_name }}"
        
    # Add actual deployment steps here
    # - SSH to production server
    # - Pull new Docker image
    # - Update docker-compose.yml
    # - Run database migrations
    # - Restart services
    # - Health checks
